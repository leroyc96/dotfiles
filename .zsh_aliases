function def_fun () {
  while [[ $# -ge 2 ]]; do
    eval "function $1 () { $2 \$@ }"
    shift 2
  done
}

function def_funs () {
  def_fun $funs
  unset funs
}

funs=(
  c 'clear'
  q 'exit'
  v 'vim'
  la 'ls -a'
  ll 'ls -l'
  lal 'ls -al'
  rmi 'rm -i'
  k 'kubectl'
  r 'ranger'
  dco 'docker-compose'

  cl 'cd -'
  dev 'cd ~/dev'

  g 'git'
  gb 'git branch'
  gc 'git checkout'
  gd 'git diff --cached --name-only'
  gf 'git fetch'
  gm 'git merge'
  gl 'git checkout -'
  gr 'git reset'
  gs 'git status'
  gst 'git stash'
  gsl 'git stash list'
  gsp 'git stash pop'
  gsd 'git stash drop'
  gsc 'git stash clear'
  pull 'git pull'
  push 'git push'
  pushf 'git push -f'
  rb 'git rebase'
  rbm 'git checkout master && git pull && git checkout - && git rebase master && git push -f'
  rba 'git rebase --abort'
  rbc 'git rebase --continue'
  master 'git checkout master && git pull'
  prune 'git prune && git remote prune origin'
  lint 'make fmt'
); def_funs

function up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

function mkcd() {
	if test "$#" -ne 1; then
		return 1
	fi

	mkdir $1 && cd $1
}

function gbc () {
	if test "$#" -ne 1; then
		echo "Usage: gbc <branch_name>"
		echo "  to create fresh branch <branch_name> from master."
		return 1;
	fi

	git checkout master && 
	git pull &&
	git checkout -b $1
}

function rbmu() {
	git checkout master &&
	git fetch upstream &&
	git rebase upstream/master &&
	git push &&
	git checkout - &&
	git rebase master
}

function cmt() {
	if test "$#" -lt 1; then
		git commit -m "." && git push
	else
		git commit -m "$*" && git push
	fi
}

function squash() {
	if test "$#" -ne 1; then
		echo "Please indicate number of commits to squash."
		return 1
	fi

	git rebase -i HEAD~$1
}

function gbd() {
	git branch | grep "$1"
	echo "Deleting above branches. Confirm? (y|n)"
  
	read -r yn </dev/tty
	case $yn in
		y ) git branch | grep "$1" | xargs git branch -D;;
		n ) return 0;;
	esac
}

function based() {
	echo "$1" | base64 -D
}

function ga() {
	buf mod update protos && (make fmt || make format)
	git add $1
	git diff --cached --name-only
}

function tp() { mkdir -p "$(dirname "$1")" && touch "$1"; }

function tag() { git checkout master && git tag $1 && git push origin $1; }

function giffer () {
	if test "$#" -ne 1; then
		echo "Usage: giffer  <path>"
		echo "  to create a gif of a video."
		return 1;
	fi

	ffmpeg -i "$1" \
	-vf "fps=30,scale=1200:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" \
	-loop 0 "${1%.*}.gif"
}
