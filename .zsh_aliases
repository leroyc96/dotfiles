function def_fun () {
  while [[ $# -ge 2 ]]; do
    eval "function $1 () { $2 \$@ }"
    shift 2
  done
}

function def_funs () {
  def_fun $funs
  unset funs
}

funs=(
  c 'clear'
  q 'exit'
  v 'vim'
  la 'ls -a'
  ll 'ls -l'
  lal 'ls -al'
  rmi 'rm -i'
  
  dev 'cd ~/dev'

  g 'git'
  gb 'git branch'
  gc 'git checkout'
  gd 'git diff --cached --name-only'
  gf 'git fetch'
  gm 'git merge'
  gl 'git checkout -'
  gr 'git reset'
  gs 'git status'
  pull 'git pull'
  push 'git push'
  pushf 'git push -f'
  rb 'git rebase'
  rbm 'git checkout main && git pull && git checkout - && git rebase main && git push -f'
  rbc 'git rebase --continue'
  stash 'git stash'
  stashp 'git stash pop'
  main 'git checkout main && git pull'
  prune 'git prune && git remote prune origin'
); def_funs

function up() {local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

function gbc () {
	if test "$#" -ne 1; then
		echo "Usage: gcb <branch_name>"
		echo "  to create fresh branch <branch_name> from master."
		return 1;
	fi

	git checkout main && 
	git pull &&
	git checkout -b $1
}

function cmt() {
	if test "$#" -ne 1; then
		git commit -m "." && git push
	else
		git commit -m "$1" && git push
	fi
}

function squash() {
	if test "$#" -ne 1; then
		echo "Please indicate number of commits to squash."
		return 1
	fi

	git rebase -i HEAD~$1
}

function gbd() {
	git branch | grep "$1"
	echo "Deleting above branches. Confirm?"
  
	read -r yn </dev/tty
	case $yn in
		y ) git branch | grep "$1" | xargs git branch -D;;
		n ) return 0;;
	esac
}

function based() {
	echo "$1" | base64 -D
}

function ga() { git add $1; git diff --cached --name-only; }
